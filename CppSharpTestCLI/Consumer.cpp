// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "Consumer.h"

using namespace System;
using namespace System::Runtime::InteropServices;

CppSharpTestCLI::Base::Base(::Base* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

CppSharpTestCLI::Base^ CppSharpTestCLI::Base::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharpTestCLI::Base((::Base*) native.ToPointer());
}

CppSharpTestCLI::Base::~Base()
{
    delete NativePtr;
}

CppSharpTestCLI::Base::Base()
{
    __ownsNativeInstance = true;
    NativePtr = new ::Base();
}

void CppSharpTestCLI::Base::DoSomething()
{
    ((::Base*)NativePtr)->DoSomething();
}

CppSharpTestCLI::Base::Base(CppSharpTestCLI::Base^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::Base*)_0->NativePtr;
    NativePtr = new ::Base(__arg0);
}

System::IntPtr CppSharpTestCLI::Base::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void CppSharpTestCLI::Base::__Instance::set(System::IntPtr object)
{
    NativePtr = (::Base*)object.ToPointer();
}

int CppSharpTestCLI::Base::MI::get()
{
    return ((::Base*)NativePtr)->m_i;
}

void CppSharpTestCLI::Base::MI::set(int value)
{
    ((::Base*)NativePtr)->m_i = value;
}

double CppSharpTestCLI::Base::MD::get()
{
    return ((::Base*)NativePtr)->m_d;
}

void CppSharpTestCLI::Base::MD::set(double value)
{
    ((::Base*)NativePtr)->m_d = value;
}

CppSharpTestCLI::Derived::Derived(::Derived* native)
    : CppSharpTestCLI::Base((::Base*)native)
{
}

CppSharpTestCLI::Derived^ CppSharpTestCLI::Derived::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::CppSharpTestCLI::Derived((::Derived*) native.ToPointer());
}

CppSharpTestCLI::Derived::~Derived()
{
    if (NativePtr)
    {
        auto __nativePtr = NativePtr;
        NativePtr = 0;
        delete (::Derived*) __nativePtr;
    }
}

CppSharpTestCLI::Derived::Derived()
    : CppSharpTestCLI::Base((::Base*)nullptr)
{
    __ownsNativeInstance = true;
    NativePtr = new ::Derived();
}

CppSharpTestCLI::Derived::Derived(CppSharpTestCLI::Derived^ _0)
    : CppSharpTestCLI::Base((::Base*)nullptr)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::Derived*)_0->NativePtr;
    NativePtr = new ::Derived(__arg0);
}

System::String^ CppSharpTestCLI::Derived::MS::get()
{
    return clix::marshalString<clix::E_UTF8>(((::Derived*)NativePtr)->m_s);
}

void CppSharpTestCLI::Derived::MS::set(System::String^ value)
{
    ((::Derived*)NativePtr)->m_s = clix::marshalString<clix::E_UTF8>(value);
}

